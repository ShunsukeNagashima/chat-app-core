// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "firebase.google.com/go/auth"

	mock "github.com/stretchr/testify/mock"
)

// FirebaseAuthenticator is an autogenerated mock type for the FirebaseAuthenticator type
type FirebaseAuthenticator struct {
	mock.Mock
}

// GetFirebaseUser provides a mock function with given fields: ctx, idToken
func (_m *FirebaseAuthenticator) GetFirebaseUser(ctx context.Context, idToken string) (*auth.Token, error) {
	ret := _m.Called(ctx, idToken)

	var r0 *auth.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*auth.Token, error)); ok {
		return rf(ctx, idToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Token); ok {
		r0 = rf(ctx, idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFirebaseAuthenticator interface {
	mock.TestingT
	Cleanup(func())
}

// NewFirebaseAuthenticator creates a new instance of FirebaseAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFirebaseAuthenticator(t mockConstructorTestingTNewFirebaseAuthenticator) *FirebaseAuthenticator {
	mock := &FirebaseAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
